"""enhance_ticket_workflow_fields

Revision ID: 1b19778c0ab8
Revises: 60eed7cd8217
Create Date: 2025-08-04 19:05:41.400478

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1b19778c0ab8'
down_revision: Union[str, Sequence[str], None] = '60eed7cd8217'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ticket_comments',
    sa.Column('comment_id', sa.String(), nullable=False),
    sa.Column('ticket_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.ticket_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('comment_id')
    )
    op.create_index(op.f('ix_ticket_comments_comment_id'), 'ticket_comments', ['comment_id'], unique=False)
    op.create_table('time_entries',
    sa.Column('entry_id', sa.String(), nullable=False),
    sa.Column('ticket_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_billable', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.ticket_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('entry_id')
    )
    op.create_index(op.f('ix_time_entries_entry_id'), 'time_entries', ['entry_id'], unique=False)
    op.add_column('tickets', sa.Column('estimated_hours', sa.Integer(), nullable=True))
    op.add_column('tickets', sa.Column('actual_hours', sa.Integer(), nullable=True))
    op.add_column('tickets', sa.Column('start_time', sa.DateTime(), nullable=True))
    op.add_column('tickets', sa.Column('end_time', sa.DateTime(), nullable=True))
    op.add_column('tickets', sa.Column('is_billable', sa.Boolean(), nullable=True))
    op.add_column('tickets', sa.Column('requires_approval', sa.Boolean(), nullable=True))
    op.add_column('tickets', sa.Column('approved_by', sa.String(), nullable=True))
    op.add_column('tickets', sa.Column('approved_at', sa.DateTime(), nullable=True))
    op.add_column('tickets', sa.Column('rejection_reason', sa.Text(), nullable=True))
    op.add_column('tickets', sa.Column('workflow_step', sa.String(), nullable=True))
    op.add_column('tickets', sa.Column('next_action_required', sa.String(), nullable=True))
    op.add_column('tickets', sa.Column('due_date', sa.DateTime(), nullable=True))
    op.add_column('tickets', sa.Column('is_urgent', sa.Boolean(), nullable=True))
    op.add_column('tickets', sa.Column('is_vip', sa.Boolean(), nullable=True))
    op.add_column('tickets', sa.Column('customer_name', sa.String(), nullable=True))
    op.add_column('tickets', sa.Column('customer_phone', sa.String(), nullable=True))
    op.add_column('tickets', sa.Column('customer_email', sa.String(), nullable=True))
    op.add_column('tickets', sa.Column('equipment_affected', sa.Text(), nullable=True))
    op.add_column('tickets', sa.Column('parts_needed', sa.Text(), nullable=True))
    op.add_column('tickets', sa.Column('parts_ordered', sa.Boolean(), nullable=True))
    op.add_column('tickets', sa.Column('parts_received', sa.Boolean(), nullable=True))
    op.add_column('tickets', sa.Column('quality_score', sa.Integer(), nullable=True))
    op.add_column('tickets', sa.Column('customer_satisfaction', sa.Integer(), nullable=True))
    op.add_column('tickets', sa.Column('follow_up_required', sa.Boolean(), nullable=True))
    op.add_column('tickets', sa.Column('follow_up_date', sa.Date(), nullable=True))
    op.add_column('tickets', sa.Column('follow_up_notes', sa.Text(), nullable=True))
    # Handle enum type changes with explicit casting
    op.execute("ALTER TABLE tickets ALTER COLUMN customer_impact TYPE impactlevel USING customer_impact::text::impactlevel")
    op.execute("ALTER TABLE tickets ALTER COLUMN business_priority TYPE businesspriority USING business_priority::text::businesspriority")
    op.create_foreign_key(None, 'tickets', 'users', ['approved_by'], ['user_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tickets', type_='foreignkey')
    # Handle enum type changes with explicit casting for downgrade
    op.execute("ALTER TABLE tickets ALTER COLUMN business_priority TYPE business_priority USING business_priority::text::business_priority")
    op.execute("ALTER TABLE tickets ALTER COLUMN customer_impact TYPE impact_level USING customer_impact::text::impact_level")
    op.drop_column('tickets', 'follow_up_notes')
    op.drop_column('tickets', 'follow_up_date')
    op.drop_column('tickets', 'follow_up_required')
    op.drop_column('tickets', 'customer_satisfaction')
    op.drop_column('tickets', 'quality_score')
    op.drop_column('tickets', 'parts_received')
    op.drop_column('tickets', 'parts_ordered')
    op.drop_column('tickets', 'parts_needed')
    op.drop_column('tickets', 'equipment_affected')
    op.drop_column('tickets', 'customer_email')
    op.drop_column('tickets', 'customer_phone')
    op.drop_column('tickets', 'customer_name')
    op.drop_column('tickets', 'is_vip')
    op.drop_column('tickets', 'is_urgent')
    op.drop_column('tickets', 'due_date')
    op.drop_column('tickets', 'next_action_required')
    op.drop_column('tickets', 'workflow_step')
    op.drop_column('tickets', 'rejection_reason')
    op.drop_column('tickets', 'approved_at')
    op.drop_column('tickets', 'approved_by')
    op.drop_column('tickets', 'requires_approval')
    op.drop_column('tickets', 'is_billable')
    op.drop_column('tickets', 'end_time')
    op.drop_column('tickets', 'start_time')
    op.drop_column('tickets', 'actual_hours')
    op.drop_column('tickets', 'estimated_hours')
    op.drop_index(op.f('ix_time_entries_entry_id'), table_name='time_entries')
    op.drop_table('time_entries')
    op.drop_index(op.f('ix_ticket_comments_comment_id'), table_name='ticket_comments')
    op.drop_table('ticket_comments')
    # ### end Alembic commands ###
